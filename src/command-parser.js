const config = require('./config');
const path = require('path');

class CommandParser {
  constructor() {
    this.patterns = config.COMMAND_PATTERNS;
  }

  parse(text) {
    const normalizedText = text.toLowerCase().trim();
    console.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã: "${normalizedText}"`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–º–∞–Ω–¥
    for (const [commandType, patterns] of Object.entries(this.patterns)) {
      for (const pattern of patterns) {
        const match = normalizedText.match(pattern);
        if (match) {
          return this.buildCommand(commandType, match, normalizedText);
        }
      }
    }

    // –ï—Å–ª–∏ —Ç–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
    return this.parseIntent(normalizedText);
  }

  buildCommand(type, match, originalText) {
    const command = {
      type,
      originalText,
      parameters: match.slice(1), // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
      systemAction: null,
      claudeRequest: null
    };

    switch (type) {
      case 'OPEN_PROJECT':
        const projectName = match[1];
        command.systemAction = {
          type: 'open_project',
          projectName,
          path: path.join(config.USER_FOLDERS.PROJECTS, projectName)
        };
        command.claudeRequest = {
          type: 'analyze_project',
          projectName,
          question: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–µ–∫—Ç ${projectName} –∏ –æ–±—ä—è—Å–Ω–∏ –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É`
        };
        break;

      case 'EXPLAIN_CODE':
        const target = match[1];
        command.claudeRequest = {
          type: 'explain',
          target,
          question: `–û–±—ä—è—Å–Ω–∏: ${target}`
        };
        break;

      case 'CREATE_FILE':
        const fileName = match[1];
        command.systemAction = {
          type: 'create_file',
          fileName,
          path: path.join(config.USER_FOLDERS.PROJECTS, fileName)
        };
        break;

      case 'OPEN_FOLDER':
        const folderName = match[1];
        command.systemAction = {
          type: 'open_folder',
          folderName,
          path: this.resolveFolderPath(folderName)
        };
        break;

      case 'SEARCH_FILES':
        const searchTerm = match[1];
        command.systemAction = {
          type: 'search_files',
          searchTerm,
          path: config.USER_FOLDERS.PROJECTS
        };
        break;
    }

    console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞:`, command);
    return command;
  }

  parseIntent(text) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    
    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
    if (this.containsWords(text, ['–æ—Ç–∫—Ä–æ–π', '–æ—Ç–∫—Ä—ã—Ç—å', '–∑–∞–ø—É—Å—Ç–∏', 'open'])) {
      // –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –ø–∞–ø–∫–∏
      const words = text.split(' ');
      const targetIndex = words.findIndex(word => 
        ['–æ—Ç–∫—Ä–æ–π', '–æ—Ç–∫—Ä—ã—Ç—å', '–∑–∞–ø—É—Å—Ç–∏', 'open'].includes(word)
      );
      
      if (targetIndex >= 0 && targetIndex < words.length - 1) {
        const target = words.slice(targetIndex + 1).join(' ');
        
        return {
          type: 'OPEN_UNKNOWN',
          originalText: text,
          parameters: [target],
          systemAction: {
            type: 'open_smart',
            target
          },
          claudeRequest: {
            type: 'help_open',
            target,
            question: `–ü–æ–º–æ–≥–∏ –æ—Ç–∫—Ä—ã—Ç—å: ${target}`
          }
        };
      }
    }

    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    if (this.containsWords(text, ['–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏', '—á—Ç–æ', '–∫–∞–∫', 'explain', 'what', 'how'])) {
      return {
        type: 'EXPLAIN_GENERAL',
        originalText: text,
        parameters: [text],
        claudeRequest: {
          type: 'explain_general',
          question: text
        }
      };
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å Claude
    return {
      type: 'GENERAL_QUESTION',
      originalText: text,
      parameters: [text],
      claudeRequest: {
        type: 'general_question',
        question: text
      }
    };
  }

  containsWords(text, words) {
    return words.some(word => text.includes(word));
  }

  resolveFolderPath(folderName) {
    const lowerName = folderName.toLowerCase();
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏
    if (lowerName.includes('—Ä–∞–±–æ—á–∏–π') || lowerName.includes('desktop')) {
      return config.USER_FOLDERS.DESKTOP;
    }
    if (lowerName.includes('–∑–∞–≥—Ä—É–∑–∫–∏') || lowerName.includes('downloads')) {
      return config.USER_FOLDERS.DOWNLOADS;
    }
    if (lowerName.includes('–¥–æ–∫—É–º–µ–Ω—Ç—ã') || lowerName.includes('documents')) {
      return config.USER_FOLDERS.DOCUMENTS;
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—â–µ–º –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
    return path.join(config.USER_FOLDERS.PROJECTS, folderName);
  }
}

module.exports = CommandParser;