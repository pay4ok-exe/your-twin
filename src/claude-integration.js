const fs = require('fs').promises;
const path = require('path');
const chokidar = require('chokidar');
const config = require('./config');
const notifier = require('node-notifier');

class ClaudeIntegration {
  constructor() {
    this.sharedFolder = config.CLAUDE_INTEGRATION.SHARED_FOLDER;
    this.requestFile = path.join(this.sharedFolder, config.CLAUDE_INTEGRATION.REQUEST_FILE);
    this.responseFile = path.join(this.sharedFolder, config.CLAUDE_INTEGRATION.RESPONSE_FILE);
    this.isWaitingForResponse = false;
    this.responseWatcher = null;
    
    this.init();
  }

  async init() {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ–±–º–µ–Ω–∞ —Å Claude –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try {
      await fs.mkdir(this.sharedFolder, { recursive: true });
      console.log(`üìÅ –ü–∞–ø–∫–∞ –¥–ª—è Claude —Å–æ–∑–¥–∞–Ω–∞: ${this.sharedFolder}`);
      
      // –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.createInstructions();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ –¥–ª—è Claude:', error);
    }
  }

  async createInstructions() {
    const instructionsPath = path.join(this.sharedFolder, 'README.md');
    const instructions = `# Your Twin - Claude Integration

## –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç

1. Your Twin —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç—É –ø–∞–ø–∫—É
2. Claude –≤ Cursor —á–µ—Ä–µ–∑ MCP filesystem –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —ç—Ç–∏ —Ñ–∞–π–ª—ã
3. Claude –æ—Ç–≤–µ—á–∞–µ—Ç, —Å–æ–∑–¥–∞–≤–∞—è —Ñ–∞–π–ª –æ—Ç–≤–µ—Ç–∞
4. Your Twin —á–∏—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏ –º–æ–∂–µ—Ç –µ–≥–æ –æ–∑–≤—É—á–∏—Ç—å

## –§–∞–π–ª—ã

- \`claude_request.md\` - –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Your Twin –∫ Claude
- \`claude_response.md\` - –æ—Ç–≤–µ—Ç—ã –æ—Ç Claude
- \`project_analysis/\` - –∞–Ω–∞–ª–∏–∑—ã –ø—Ä–æ–µ–∫—Ç–æ–≤

## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MCP –≤ Cursor

–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –≤–∞—à–µ–º \`settings.json\` Cursor –µ—Å—Ç—å:

\`\`\`json
{
  "mcpServers": {
    "filesystem": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-filesystem",
        "${this.sharedFolder.replace(/\\/g, '\\\\')}"
      ]
    }
  }
}
\`\`\`

–¢–µ–ø–µ—Ä—å Claude —Å–º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ñ–∞–π–ª—ã –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ!
`;

    try {
      await fs.writeFile(instructionsPath, instructions, 'utf8');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:', error);
    }
  }

  async sendRequest(request) {
    console.log(`ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å Claude:`, request);
    
    try {
      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      const requestContent = this.formatRequest(request);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Ñ–∞–π–ª
      await fs.writeFile(this.requestFile, requestContent, 'utf8');
      
      console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω –≤: ${this.requestFile}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      notifier.notify({
        title: 'Your Twin',
        message: '–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω Claude. –û—Ç–∫—Ä–æ–π—Ç–µ Cursor –¥–ª—è –æ—Ç–≤–µ—Ç–∞.',
        icon: path.join(__dirname, '..', 'assets', 'icon.png'),
        sound: true,
        wait: false
      });
      
      // –ù–∞—á–∏–Ω–∞–µ–º –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç
      this.waitForResponse();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    }
  }

  formatRequest(request) {
    const timestamp = new Date().toLocaleString('ru-RU');
    
    let content = `# –ó–∞–ø—Ä–æ—Å –æ—Ç Your Twin\n\n`;
    content += `**–í—Ä–µ–º—è:** ${timestamp}\n`;
    content += `**–¢–∏–ø:** ${request.type}\n\n`;
    
    switch (request.type) {
      case 'analyze_project':
        content += `## –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞: ${request.projectName}\n\n`;
        content += `Claude, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–µ–∫—Ç "${request.projectName}" –∏ –æ–±—ä—è—Å–Ω–∏:\n\n`;
        content += `1. –°—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞\n`;
        content += `2. –û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ\n`;
        content += `3. –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n`;
        content += `4. –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ –∏—Ö —Ä–æ–ª—å\n\n`;
        content += `–ü—Ä–æ–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ: \`${request.projectName}\`\n\n`;
        break;
        
      case 'explain':
        content += `## –û–±—ä—è—Å–Ω–µ–Ω–∏–µ\n\n`;
        content += `${request.question}\n\n`;
        break;
        
      case 'general_question':
        content += `## –í–æ–ø—Ä–æ—Å\n\n`;
        content += `${request.question}\n\n`;
        break;
        
      default:
        content += `${request.question}\n\n`;
    }
    
    content += `---\n\n`;
    content += `*–û—Ç–≤–µ—Ç—å—Ç–µ, —Å–æ–∑–¥–∞–≤ –∏–ª–∏ –æ–±–Ω–æ–≤–∏–≤ —Ñ–∞–π–ª \`claude_response.md\` –≤ —ç—Ç–æ–π –∂–µ –ø–∞–ø–∫–µ.*\n`;
    
    return content;
  }

  waitForResponse() {
    if (this.isWaitingForResponse) {
      return;
    }
    
    console.log('‚è≥ –ñ–¥—É –æ—Ç–≤–µ—Ç –æ—Ç Claude...');
    this.isWaitingForResponse = true;
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ —Ñ–∞–π–ª–µ –æ—Ç–≤–µ—Ç–æ–≤
    this.responseWatcher = chokidar.watch(this.responseFile, {
      persistent: true,
      ignoreInitial: true
    });
    
    this.responseWatcher.on('add', () => this.handleResponse());
    this.responseWatcher.on('change', () => this.handleResponse());
    
    // –¢–∞–π–º–∞—É—Ç –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (5 –º–∏–Ω—É—Ç)
    setTimeout(() => {
      if (this.isWaitingForResponse) {
        this.stopWaitingForResponse();
        console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude');
      }
    }, 5 * 60 * 1000);
  }

  async handleResponse() {
    if (!this.isWaitingForResponse) {
      return;
    }
    
    try {
      console.log('üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Claude!');
      
      const response = await fs.readFile(this.responseFile, 'utf8');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      notifier.notify({
        title: 'Your Twin - –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω',
        message: 'Claude –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å!',
        icon: path.join(__dirname, '..', 'assets', 'icon.png'),
        sound: true,
        wait: false
      });
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      console.log('üìù –û—Ç–≤–µ—Ç Claude:', response.substring(0, 200) + '...');
      
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç-–≤-—Ä–µ—á—å –∑–¥–µ—Å—å
      // await this.speakResponse(response);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:', error);
    } finally {
      this.stopWaitingForResponse();
    }
  }

  stopWaitingForResponse() {
    this.isWaitingForResponse = false;
    
    if (this.responseWatcher) {
      this.responseWatcher.close();
      this.responseWatcher = null;
    }
  }

  async speakResponse(response) {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç-–≤-—Ä–µ—á—å
    // const say = require('say');
    // 
    // // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    // const cleanText = response
    //   .replace(/#+\s*/g, '') // –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ markdown
    //   .replace(/\*\*(.*?)\*\*/g, '$1') // –£–±–∏—Ä–∞–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    //   .replace(/\*(.*?)\*/g, '$1') // –£–±–∏—Ä–∞–µ–º –∫—É—Ä—Å–∏–≤
    //   .replace(/`(.*?)`/g, '$1') // –£–±–∏—Ä–∞–µ–º –∫–æ–¥
    //   .substring(0, 500); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    // 
    // say.speak(cleanText, 'Microsoft Irina Desktop', 1.0);
    
    console.log('üîä –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  async analyzeFile(filePath) {
    const fileName = path.basename(filePath);
    
    const request = {
      type: 'analyze_file',
      fileName,
      question: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∞–π–ª ${fileName} –∏ –æ–±—ä—è—Å–Ω–∏ –µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ`
    };
    
    await this.sendRequest(request);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
  async compareFiles(file1, file2) {
    const request = {
      type: 'compare_files',
      files: [file1, file2],
      question: `–°—Ä–∞–≤–Ω–∏ —Ñ–∞–π–ª—ã ${path.basename(file1)} –∏ ${path.basename(file2)}. –ù–∞–π–¥–∏ —Ä–∞–∑–ª–∏—á–∏—è –∏ –æ–±—ä—è—Å–Ω–∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–µ.`
    };
    
    await this.sendRequest(request);
  }
}

module.exports = ClaudeIntegration;