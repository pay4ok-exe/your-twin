class YourTwinUI {
    constructor() {
        this.isListening = false;
        this.elements = {
            status: document.getElementById('status'),
            listeningIndicator: document.getElementById('listeningIndicator'),
            commandText: document.getElementById('commandText'),
            commandHint: document.getElementById('commandHint'),
            toggleBtn: document.getElementById('toggleBtn'),
            settingsBtn: document.getElementById('settingsBtn'),
            closeBtn: document.getElementById('closeBtn'),
            container: document.querySelector('.container')
        };
        
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.updateUI();
        console.log('üé® Your Twin UI initialized');
    }

    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.elements.toggleBtn.addEventListener('click', () => {
            this.toggleListening();
        });

        this.elements.settingsBtn.addEventListener('click', () => {
            this.openSettings();
        });

        this.elements.closeBtn.addEventListener('click', () => {
            this.hide();
        });

        // –ï—Å–ª–∏ —ç—Ç–æ Electron –æ–∫—Ä—É–∂–µ–Ω–∏–µ, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ IPC
        if (typeof require !== 'undefined') {
            try {
                const { ipcRenderer } = require('electron');
                
                // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
                ipcRenderer.on('listening-started', () => {
                    this.setListening(true);
                });
                
                ipcRenderer.on('listening-stopped', () => {
                    this.setListening(false);
                });
                
                ipcRenderer.on('command-recognized', (event, command) => {
                    this.showCommand(command);
                });
                
                ipcRenderer.on('command-executing', (event, action) => {
                    this.showProcessing(action);
                });
                
                ipcRenderer.on('command-completed', (event, result) => {
                    this.showSuccess(result);
                });
                
            } catch (error) {
                console.log('üì± –ù–µ Electron –æ–∫—Ä—É–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ —Ä–µ–∂–∏–º');
                this.setupDemoMode();
            }
        } else {
            this.setupDemoMode();
        }
    }

    setupDemoMode() {
        // –î–µ–º–æ —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        console.log('üé≠ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ —Ä–µ–∂–∏–º–∞');
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            if (!this.isListening) {
                this.simulateActivity();
            }
        }, 5000);
    }

    simulateActivity() {
        const activities = [
            { command: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç imperium', type: 'project' },
            { command: '–û–±—ä—è—Å–Ω–∏—Ç—å –∫–æ–¥ main.js', type: 'explain' },
            { command: '–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª readme.md', type: 'create' },
            { command: '–ù–∞–π—Ç–∏ —Ñ–∞–π–ª config', type: 'search' }
        ];
        
        const activity = activities[Math.floor(Math.random() * activities.length)];
        
        this.setListening(true);
        
        setTimeout(() => {
            this.showCommand(activity.command);
        }, 1000);
        
        setTimeout(() => {
            this.showProcessing(`–í—ã–ø–æ–ª–Ω—è—é: ${activity.command}`);
        }, 2000);
        
        setTimeout(() => {
            this.showSuccess('–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            this.setListening(false);
        }, 3500);
    }

    toggleListening() {
        if (typeof require !== 'undefined') {
            try {
                const { ipcRenderer } = require('electron');
                ipcRenderer.send('toggle-listening');
            } catch (error) {
                // –î–µ–º–æ —Ä–µ–∂–∏–º
                this.setListening(!this.isListening);
            }
        } else {
            this.setListening(!this.isListening);
        }
    }

    setListening(listening) {
        this.isListening = listening;
        this.updateUI();
        
        if (listening) {
            this.elements.commandText.textContent = '–°–ª—É—à–∞—é... –≥–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É';
            this.elements.commandHint.textContent = '–°–∫–∞–∂–∏—Ç–µ —á–µ—Ç–∫–æ –∏ —è—Å–Ω–æ';
            this.elements.container.classList.add('listening');
            this.elements.listeningIndicator.classList.add('active');
            this.elements.toggleBtn.querySelector('.btn-text').textContent = '–°—Ç–æ–ø';
            this.elements.toggleBtn.querySelector('.btn-icon').textContent = '‚èπÔ∏è';
        } else {
            this.elements.commandText.textContent = '–ù–∞–∂–º–∏—Ç–µ Ctrl+Shift+V –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏';
            this.elements.commandHint.textContent = '–°–∫–∞–∂–∏—Ç–µ: "–û—Ç–∫—Ä–æ–π –ø—Ä–æ–µ–∫—Ç imperium" –∏–ª–∏ "–û–±—ä—è—Å–Ω–∏ –∫–æ–¥"';
            this.elements.container.classList.remove('listening', 'processing', 'success');
            this.elements.listeningIndicator.classList.remove('active');
            this.elements.toggleBtn.querySelector('.btn-text').textContent = '–°–ª—É—à–∞—Ç—å';
            this.elements.toggleBtn.querySelector('.btn-icon').textContent = 'üé§';
        }
    }

    showCommand(command) {
        this.elements.commandText.textContent = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: "${command}"`;
        this.elements.commandHint.textContent = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É...';
        this.elements.container.classList.remove('listening');
        this.elements.container.classList.add('processing');
    }

    showProcessing(action) {
        this.elements.commandText.textContent = action;
        this.elements.commandHint.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...';
        this.elements.container.classList.add('processing');
    }

    showSuccess(message) {
        this.elements.commandText.textContent = message;
        this.elements.commandHint.textContent = '–ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ';
        this.elements.container.classList.remove('processing');
        this.elements.container.classList.add('success');
        
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (!this.isListening) {
                this.elements.container.classList.remove('success');
                this.elements.commandText.textContent = '–ù–∞–∂–º–∏—Ç–µ Ctrl+Shift+V –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏';
                this.elements.commandHint.textContent = '–°–∫–∞–∂–∏—Ç–µ: "–û—Ç–∫—Ä–æ–π –ø—Ä–æ–µ–∫—Ç imperium" –∏–ª–∏ "–û–±—ä—è—Å–Ω–∏ –∫–æ–¥"';
            }
        }, 3000);
    }

    showError(error) {
        this.elements.commandText.textContent = `–û—à–∏–±–∫–∞: ${error}`;
        this.elements.commandHint.textContent = '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑';
        this.elements.container.classList.remove('listening', 'processing', 'success');
        
        setTimeout(() => {
            if (!this.isListening) {
                this.setListening(false);
            }
        }, 3000);
    }

    updateUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        const statusText = this.elements.status.querySelector('.status-text');
        if (this.isListening) {
            statusText.textContent = '–°–ª—É—à–∞—é';
            this.elements.status.classList.add('listening');
        } else {
            statusText.textContent = '–í –æ–∂–∏–¥–∞–Ω–∏–∏';
            this.elements.status.classList.remove('listening');
        }
    }

    openSettings() {
        console.log('‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
        
        if (typeof require !== 'undefined') {
            try {
                const { ipcRenderer } = require('electron');
                ipcRenderer.send('open-settings');
            } catch (error) {
                // –î–µ–º–æ —Ä–µ–∂–∏–º
                alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–∫—Ä–æ—é—Ç—Å—è –≤ –±—É–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏!');
            }
        } else {
            alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–∫—Ä–æ—é—Ç—Å—è –≤ –±—É–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏!');
        }
    }

    hide() {
        console.log('üëª –°–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞...');
        
        if (typeof require !== 'undefined') {
            try {
                const { ipcRenderer } = require('electron');
                ipcRenderer.send('hide-window');
            } catch (error) {
                // –î–µ–º–æ —Ä–µ–∂–∏–º
                document.body.style.opacity = '0';
                setTimeout(() => {
                    document.body.style.opacity = '1';
                }, 1000);
            }
        } else {
            document.body.style.opacity = '0';
            setTimeout(() => {
                document.body.style.opacity = '1';
            }, 1000);
        }
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≥–ª–∞–≤–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
    setStatus(status, message) {
        this.elements.commandText.textContent = message;
        this.elements.container.className = `container ${status}`;
    }

    showNotification(title, message) {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ UI
        console.log(`üì¢ ${title}: ${message}`);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI –∫–æ–≥–¥–∞ DOM –∑–∞–≥—Ä—É–∂–µ–Ω
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        window.yourTwinUI = new YourTwinUI();
    });
} else {
    window.yourTwinUI = new YourTwinUI();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Electron
if (typeof module !== 'undefined' && module.exports) {
    module.exports = YourTwinUI;
}