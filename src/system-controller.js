const { exec, spawn } = require('child_process');
const fs = require('fs').promises;
const path = require('path');
const os = require('os');
const config = require('./config');
const robot = require('robotjs');
const notifier = require('node-notifier');

class SystemController {
  constructor() {
    this.platform = os.platform();
  }

  async execute(action) {
    console.log(`‚ö° –í—ã–ø–æ–ª–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ:`, action);
    
    try {
      switch (action.type) {
        case 'open_project':
          await this.openProject(action.projectName, action.path);
          break;
        case 'create_file':
          await this.createFile(action.fileName, action.path);
          break;
        case 'open_folder':
          await this.openFolder(action.path);
          break;
        case 'search_files':
          await this.searchFiles(action.searchTerm, action.path);
          break;
        case 'open_smart':
          await this.openSmart(action.target);
          break;
        default:
          console.log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action.type}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è:`, error);
      this.showNotification('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å: ${action.type}`);
    }
  }

  async openProject(projectName, projectPath) {
    console.log(`üìÇ –û—Ç–∫—Ä—ã–≤–∞—é –ø—Ä–æ–µ–∫—Ç: ${projectName}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    try {
      await fs.access(projectPath);
    } catch (error) {
      console.log(`‚ö†Ô∏è –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${projectPath}`);
      
      // –ò—â–µ–º –ø—Ä–æ–µ–∫—Ç –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
      const foundPath = await this.findProject(projectName);
      if (foundPath) {
        projectPath = foundPath;
      } else {
        this.showNotification('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', `–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç: ${projectName}`);
        return;
      }
    }

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç –≤ Cursor
    await this.openCursorWithProject(projectPath);
    this.showNotification('–ü—Ä–æ–µ–∫—Ç –æ—Ç–∫—Ä—ã—Ç', `–ü—Ä–æ–µ–∫—Ç ${projectName} –æ—Ç–∫—Ä—ã—Ç –≤ Cursor`);
  }

  async findProject(projectName) {
    const searchPaths = [
      config.USER_FOLDERS.DESKTOP,
      config.USER_FOLDERS.DOCUMENTS,
      path.join(config.USER_FOLDERS.DESKTOP, 'projects'),
      path.join(config.USER_FOLDERS.DOCUMENTS, 'projects')
    ];

    for (const searchPath of searchPaths) {
      const possiblePath = path.join(searchPath, projectName);
      try {
        await fs.access(possiblePath);
        console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω: ${possiblePath}`);
        return possiblePath;
      } catch (error) {
        // –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º –ø—É—Ç–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
      }
    }

    return null;
  }

  async openCursorWithProject(projectPath) {
    const cursorPath = this.getApplicationPath('CURSOR');
    
    if (this.platform === 'win32') {
      exec(`"${cursorPath}" "${projectPath}"`);
    } else if (this.platform === 'darwin') {
      exec(`open -a "${cursorPath}" "${projectPath}"`);
    } else {
      exec(`"${cursorPath}" "${projectPath}"`);
    }
  }

  async openCursor() {
    console.log('üñ±Ô∏è –û—Ç–∫—Ä—ã–≤–∞—é Cursor...');
    const cursorPath = this.getApplicationPath('CURSOR');
    
    if (this.platform === 'win32') {
      exec(`"${cursorPath}"`);
    } else if (this.platform === 'darwin') {
      exec(`open -a "${cursorPath}"`);
    } else {
      exec(`"${cursorPath}"`);
    }
  }

  async openClaude() {
    console.log('ü§ñ –û—Ç–∫—Ä—ã–≤–∞—é Claude...');
    const claudePath = this.getApplicationPath('CLAUDE');
    
    if (this.platform === 'win32') {
      exec(`"${claudePath}"`);
    } else if (this.platform === 'darwin') {
      exec(`open -a "${claudePath}"`);
    } else {
      exec(`"${claudePath}"`);
    }
  }

  async createFile(fileName, filePath) {
    console.log(`üìÑ –°–æ–∑–¥–∞—é —Ñ–∞–π–ª: ${fileName}`);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const dir = path.dirname(filePath);
    await fs.mkdir(dir, { recursive: true });
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
    await fs.writeFile(filePath, '', 'utf8');
    
    this.showNotification('–§–∞–π–ª —Å–æ–∑–¥–∞–Ω', `–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${fileName}`);
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ Cursor
    await this.openCursorWithProject(filePath);
  }

  async openFolder(folderPath) {
    console.log(`üìÅ –û—Ç–∫—Ä—ã–≤–∞—é –ø–∞–ø–∫—É: ${folderPath}`);
    
    try {
      await fs.access(folderPath);
    } catch (error) {
      this.showNotification('–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', `–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É: ${folderPath}`);
      return;
    }

    if (this.platform === 'win32') {
      exec(`explorer "${folderPath}"`);
    } else if (this.platform === 'darwin') {
      exec(`open "${folderPath}"`);
    } else {
      exec(`xdg-open "${folderPath}"`);
    }

    this.showNotification('–ü–∞–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞', `–û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–ø–∫–∞: ${path.basename(folderPath)}`);
  }

  async searchFiles(searchTerm, searchPath) {
    console.log(`üîç –ò—â—É —Ñ–∞–π–ª—ã: ${searchTerm} –≤ ${searchPath}`);
    
    try {
      const files = await this.findFiles(searchTerm, searchPath);
      
      if (files.length === 0) {
        this.showNotification('–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', `–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: ${searchTerm}`);
        return;
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      if (files.length > 0) {
        await this.openCursorWithProject(files[0]);
        this.showNotification('–§–∞–π–ª –Ω–∞–π–¥–µ–Ω', `–û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª: ${path.basename(files[0])}`);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', error);
      this.showNotification('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤');
    }
  }

  async findFiles(searchTerm, searchPath) {
    const files = [];
    
    async function searchRecursive(dir) {
      try {
        const entries = await fs.readdir(dir, { withFileTypes: true });
        
        for (const entry of entries) {
          const fullPath = path.join(dir, entry.name);
          
          if (entry.isDirectory()) {
            await searchRecursive(fullPath);
          } else if (entry.name.toLowerCase().includes(searchTerm.toLowerCase())) {
            files.push(fullPath);
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–∞–º
      }
    }
    
    await searchRecursive(searchPath);
    return files;
  }

  async openSmart(target) {
    console.log(`üß† –£–º–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ: ${target}`);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–∞–∏–ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    const searchPaths = [
      config.USER_FOLDERS.DESKTOP,
      config.USER_FOLDERS.PROJECTS,
      config.USER_FOLDERS.DOCUMENTS
    ];

    for (const basePath of searchPaths) {
      try {
        const entries = await fs.readdir(basePath, { withFileTypes: true });
        
        for (const entry of entries) {
          if (entry.name.toLowerCase().includes(target.toLowerCase())) {
            const fullPath = path.join(basePath, entry.name);
            
            if (entry.isDirectory()) {
              await this.openCursorWithProject(fullPath);
            } else {
              await this.openCursorWithProject(fullPath);
            }
            
            this.showNotification('–ù–∞–π–¥–µ–Ω–æ –∏ –æ—Ç–∫—Ä—ã—Ç–æ', `–û—Ç–∫—Ä—ã—Ç–æ: ${entry.name}`);
            return;
          }
        }
      } catch (error) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –≤ –¥—Ä—É–≥–∏—Ö –ø–∞–ø–∫–∞—Ö
      }
    }

    this.showNotification('–ù–µ –Ω–∞–π–¥–µ–Ω–æ', `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏: ${target}`);
  }

  getApplicationPath(appName) {
    const app = config.APPLICATIONS[appName];
    
    if (this.platform === 'win32') {
      return app.windows;
    } else if (this.platform === 'darwin') {
      return app.mac;
    } else {
      return app.linux;
    }
  }

  showNotification(title, message) {
    notifier.notify({
      title: `Your Twin - ${title}`,
      message,
      icon: path.join(__dirname, '..', 'assets', 'icon.png'),
      sound: false,
      wait: false
    });
  }
}

module.exports = SystemController;