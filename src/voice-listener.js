const EventEmitter = require('events');
const recorder = require('node-record-lpcm16');
const speech = require('@google-cloud/speech');
const config = require('./config');

class VoiceListener extends EventEmitter {
  constructor() {
    super();
    this.isListening = false;
    this.recording = null;
    this.speechClient = null;
    this.recognizeStream = null;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Google Speech (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    try {
      this.speechClient = new speech.SpeechClient();
    } catch (error) {
      console.log('‚ö†Ô∏è Google Speech API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ API');
    }
  }

  start() {
    if (this.isListening) {
      console.log('üé§ –£–∂–µ —Å–ª—É—à–∞—é...');
      return;
    }

    console.log('üé§ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ...');
    this.isListening = true;

    if (this.speechClient) {
      this.startGoogleSpeechRecognition();
    } else {
      this.startWebSpeechRecognition();
    }
  }

  stop() {
    if (!this.isListening) {
      return;
    }

    console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ...');
    this.isListening = false;

    if (this.recording) {
      this.recording.stop();
      this.recording = null;
    }

    if (this.recognizeStream) {
      this.recognizeStream.end();
      this.recognizeStream = null;
    }

    this.emit('end');
  }

  startGoogleSpeechRecognition() {
    const request = {
      config: {
        encoding: 'LINEAR16',
        sampleRateHertz: 16000,
        languageCode: config.VOICE.LANGUAGE,
        alternativeLanguageCodes: [config.VOICE.ALTERNATIVE_LANGUAGE],
        enableAutomaticPunctuation: true,
        model: 'latest_short'
      },
      interimResults: false
    };

    this.recognizeStream = this.speechClient
      .streamingRecognize(request)
      .on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ Google Speech:', error);
        this.emit('error', error);
      })
      .on('data', (data) => {
        if (data.results[0] && data.results[0].alternatives[0]) {
          const transcript = data.results[0].alternatives[0].transcript;
          const confidence = data.results[0].alternatives[0].confidence;
          
          if (confidence >= config.VOICE.CONFIDENCE_THRESHOLD) {
            console.log(`‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ (${Math.round(confidence * 100)}%): ${transcript}`);
            this.emit('speech', transcript.trim());
          } else {
            console.log(`‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (${Math.round(confidence * 100)}%): ${transcript}`);
          }
        }
      });

    this.recording = recorder.record({
      sampleRateHertz: 16000,
      threshold: 0,
      verbose: false,
      recordProgram: 'sox',
      silence: '1.0',
      thresholdStart: 0.5,
      thresholdEnd: 0.5
    });

    this.recording.stream().pipe(this.recognizeStream);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç
    setTimeout(() => {
      if (this.isListening) {
        this.stop();
      }
    }, config.VOICE.TIMEOUT);
  }

  startWebSpeechRecognition() {
    // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ Web Speech API
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —Å—Ä–µ–¥–µ
    console.log('üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º Web Speech API...');
    
    // –≠–º—É–ª–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    setTimeout(() => {
      this.emit('speech', '—Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞');
    }, 1000);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
  simulateVoiceInput(text) {
    console.log(`üß™ –¢–µ—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥: "${text}"`);
    this.emit('speech', text);
  }
}

module.exports = VoiceListener;