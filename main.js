const { app, BrowserWindow, globalShortcut, ipcMain, Tray, Menu, nativeImage } = require('electron');
const path = require('path');
const VoiceListener = require('./src/voice-listener');
const CommandParser = require('./src/command-parser');
const SystemController = require('./src/system-controller');
const ClaudeIntegration = require('./src/claude-integration');
const config = require('./src/config');

class YourTwin {
  constructor() {
    this.mainWindow = null;
    this.tray = null;
    this.voiceListener = new VoiceListener();
    this.commandParser = new CommandParser();
    this.systemController = new SystemController();
    this.claudeIntegration = new ClaudeIntegration();
    this.isListening = false;
  }

  async init() {
    console.log('ü§ñ Your Twin –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
    
    // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    this.createMainWindow();
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π
    this.createTray();
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    this.registerGlobalShortcuts();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.setupEventHandlers();
    
    console.log('‚úÖ Your Twin –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    console.log(`üé§ –ù–∞–∂–º–∏ ${config.HOTKEYS.VOICE_ACTIVATION} –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥`);
  }

  createMainWindow() {
    this.mainWindow = new BrowserWindow({
      width: 400,
      height: 300,
      show: false,
      frame: false,
      transparent: true,
      alwaysOnTop: true,
      skipTaskbar: true,
      webPreferences: {
        nodeIntegration: true,
        contextIsolation: false
      }
    });

    this.mainWindow.loadFile('src/ui/index.html');
  }

  createTray() {
    const icon = nativeImage.createFromPath(path.join(__dirname, 'assets/icon.png'));
    this.tray = new Tray(icon.resize({ width: 16, height: 16 }));
    
    const contextMenu = Menu.buildFromTemplate([
      {
        label: 'Your Twin',
        enabled: false
      },
      { type: 'separator' },
      {
        label: this.isListening ? 'üé§ –°–ª—É—à–∞—é...' : '‚è∏Ô∏è –í –æ–∂–∏–¥–∞–Ω–∏–∏',
        enabled: false
      },
      {
        label: '–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ',
        click: () => this.showMainWindow()
      },
      {
        label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        click: () => this.openSettings()
      },
      { type: 'separator' },
      {
        label: '–í—ã—Ö–æ–¥',
        click: () => app.quit()
      }
    ]);
    
    this.tray.setContextMenu(contextMenu);
    this.tray.setToolTip('Your Twin - AI Assistant');
  }

  registerGlobalShortcuts() {
    // –ì–ª–∞–≤–Ω–∞—è –≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    globalShortcut.register(config.HOTKEYS.VOICE_ACTIVATION, () => {
      this.toggleVoiceListening();
    });

    // –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
    globalShortcut.register(config.HOTKEYS.QUICK_CURSOR, () => {
      this.systemController.openCursor();
    });

    globalShortcut.register(config.HOTKEYS.QUICK_CLAUDE, () => {
      this.systemController.openClaude();
    });
  }

  setupEventHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ä–µ—á–∏
    this.voiceListener.on('speech', async (text) => {
      console.log(`üó£Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: "${text}"`);
      await this.handleVoiceCommand(text);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    this.voiceListener.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏:', error);
      this.stopListening();
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    this.voiceListener.on('end', () => {
      this.stopListening();
    });
  }

  async handleVoiceCommand(text) {
    try {
      // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
      const command = this.commandParser.parse(text);
      console.log('üìù –ö–æ–º–∞–Ω–¥–∞:', command);

      if (!command) {
        console.log('‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞');
        return;
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
      if (command.systemAction) {
        await this.systemController.execute(command.systemAction);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å Claude –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (command.claudeRequest) {
        await this.claudeIntegration.sendRequest(command.claudeRequest);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
    }
  }

  toggleVoiceListening() {
    if (this.isListening) {
      this.stopListening();
    } else {
      this.startListening();
    }
  }

  startListening() {
    console.log('üé§ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ...');
    this.isListening = true;
    this.voiceListener.start();
    this.showMainWindow();
    this.updateTrayStatus();
  }

  stopListening() {
    console.log('‚è∏Ô∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ');
    this.isListening = false;
    this.voiceListener.stop();
    this.hideMainWindow();
    this.updateTrayStatus();
  }

  showMainWindow() {
    if (this.mainWindow) {
      this.mainWindow.show();
      this.mainWindow.center();
    }
  }

  hideMainWindow() {
    if (this.mainWindow) {
      this.mainWindow.hide();
    }
  }

  updateTrayStatus() {
    if (this.tray) {
      const contextMenu = Menu.buildFromTemplate([
        {
          label: 'Your Twin',
          enabled: false
        },
        { type: 'separator' },
        {
          label: this.isListening ? 'üé§ –°–ª—É—à–∞—é...' : '‚è∏Ô∏è –í –æ–∂–∏–¥–∞–Ω–∏–∏',
          enabled: false
        },
        {
          label: '–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ',
          click: () => this.showMainWindow()
        },
        {
          label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
          click: () => this.openSettings()
        },
        { type: 'separator' },
        {
          label: '–í—ã—Ö–æ–¥',
          click: () => app.quit()
        }
      ]);
      this.tray.setContextMenu(contextMenu);
    }
  }

  openSettings() {
    // TODO: –û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    console.log('‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const yourTwin = new YourTwin();

// –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.whenReady().then(() => {
  yourTwin.init();
});

app.on('window-all-closed', () => {
  // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ç—Ä–µ–µ
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    yourTwin.createMainWindow();
  }
});

app.on('will-quit', () => {
  // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
  globalShortcut.unregisterAll();
});

console.log('üöÄ Your Twin –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');